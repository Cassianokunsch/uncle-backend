// Code generated by Prisma (prisma@1.34.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  commercialVisit: (where?: CommercialVisitWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  seller: (where?: SellerWhereInput) => Promise<boolean>;
  state: (where?: StateWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  commercialVisit: (
    where: CommercialVisitWhereUniqueInput
  ) => CommercialVisitNullablePromise;
  commercialVisits: (args?: {
    where?: CommercialVisitWhereInput;
    orderBy?: CommercialVisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CommercialVisit>;
  commercialVisitsConnection: (args?: {
    where?: CommercialVisitWhereInput;
    orderBy?: CommercialVisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommercialVisitConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  seller: (where: SellerWhereUniqueInput) => SellerNullablePromise;
  sellers: (args?: {
    where?: SellerWhereInput;
    orderBy?: SellerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Seller>;
  sellersConnection: (args?: {
    where?: SellerWhereInput;
    orderBy?: SellerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SellerConnectionPromise;
  state: (where: StateWhereUniqueInput) => StateNullablePromise;
  states: (args?: {
    where?: StateWhereInput;
    orderBy?: StateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<State>;
  statesConnection: (args?: {
    where?: StateWhereInput;
    orderBy?: StateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StateConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCommercialVisit: (
    data: CommercialVisitCreateInput
  ) => CommercialVisitPromise;
  updateCommercialVisit: (args: {
    data: CommercialVisitUpdateInput;
    where: CommercialVisitWhereUniqueInput;
  }) => CommercialVisitPromise;
  updateManyCommercialVisits: (args: {
    data: CommercialVisitUpdateManyMutationInput;
    where?: CommercialVisitWhereInput;
  }) => BatchPayloadPromise;
  upsertCommercialVisit: (args: {
    where: CommercialVisitWhereUniqueInput;
    create: CommercialVisitCreateInput;
    update: CommercialVisitUpdateInput;
  }) => CommercialVisitPromise;
  deleteCommercialVisit: (
    where: CommercialVisitWhereUniqueInput
  ) => CommercialVisitPromise;
  deleteManyCommercialVisits: (
    where?: CommercialVisitWhereInput
  ) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createSeller: (data: SellerCreateInput) => SellerPromise;
  updateSeller: (args: {
    data: SellerUpdateInput;
    where: SellerWhereUniqueInput;
  }) => SellerPromise;
  updateManySellers: (args: {
    data: SellerUpdateManyMutationInput;
    where?: SellerWhereInput;
  }) => BatchPayloadPromise;
  upsertSeller: (args: {
    where: SellerWhereUniqueInput;
    create: SellerCreateInput;
    update: SellerUpdateInput;
  }) => SellerPromise;
  deleteSeller: (where: SellerWhereUniqueInput) => SellerPromise;
  deleteManySellers: (where?: SellerWhereInput) => BatchPayloadPromise;
  createState: (data: StateCreateInput) => StatePromise;
  updateState: (args: {
    data: StateUpdateInput;
    where: StateWhereUniqueInput;
  }) => StatePromise;
  updateManyStates: (args: {
    data: StateUpdateManyMutationInput;
    where?: StateWhereInput;
  }) => BatchPayloadPromise;
  upsertState: (args: {
    where: StateWhereUniqueInput;
    create: StateCreateInput;
    update: StateUpdateInput;
  }) => StatePromise;
  deleteState: (where: StateWhereUniqueInput) => StatePromise;
  deleteManyStates: (where?: StateWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  commercialVisit: (
    where?: CommercialVisitSubscriptionWhereInput
  ) => CommercialVisitSubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  seller: (
    where?: SellerSubscriptionWhereInput
  ) => SellerSubscriptionPayloadSubscription;
  state: (
    where?: StateSubscriptionWhereInput
  ) => StateSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "mainContactName_ASC"
  | "mainContactName_DESC"
  | "note_ASC"
  | "note_DESC"
  | "landline_ASC"
  | "landline_DESC"
  | "cellPhone_ASC"
  | "cellPhone_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "stateRegistration_ASC"
  | "stateRegistration_DESC"
  | "cpfCnpj_ASC"
  | "cpfCnpj_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type CommercialVisitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "visitDate_ASC"
  | "visitDate_DESC"
  | "contactPerson_ASC"
  | "contactPerson_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type SellerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type StateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "shortName_ASC"
  | "shortName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CommercialVisitUpdateInput {
  visitDate?: Maybe<DateTimeInput>;
  contactPerson?: Maybe<String>;
  description?: Maybe<String>;
  seller?: Maybe<SellerUpdateOneRequiredInput>;
  customer?: Maybe<CustomerUpdateOneRequiredWithoutCommercialVisitsInput>;
  deleted?: Maybe<Boolean>;
}

export type CommercialVisitWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface CustomerUpdateWithWhereUniqueWithoutSellerInput {
  where: CustomerWhereUniqueInput;
  data: CustomerUpdateWithoutSellerDataInput;
}

export interface StateWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  shortName?: Maybe<String>;
  shortName_not?: Maybe<String>;
  shortName_in?: Maybe<String[] | String>;
  shortName_not_in?: Maybe<String[] | String>;
  shortName_lt?: Maybe<String>;
  shortName_lte?: Maybe<String>;
  shortName_gt?: Maybe<String>;
  shortName_gte?: Maybe<String>;
  shortName_contains?: Maybe<String>;
  shortName_not_contains?: Maybe<String>;
  shortName_starts_with?: Maybe<String>;
  shortName_not_starts_with?: Maybe<String>;
  shortName_ends_with?: Maybe<String>;
  shortName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<StateWhereInput[] | StateWhereInput>;
  OR?: Maybe<StateWhereInput[] | StateWhereInput>;
  NOT?: Maybe<StateWhereInput[] | StateWhereInput>;
}

export interface CustomerUpdateWithoutSellerDataInput {
  companyName?: Maybe<String>;
  email?: Maybe<String>;
  mainContactName?: Maybe<String>;
  note?: Maybe<String>;
  landline?: Maybe<String>;
  cellPhone?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  cpfCnpj?: Maybe<String>;
  state?: Maybe<StateUpdateOneRequiredInput>;
  commercialVisits?: Maybe<CommercialVisitUpdateManyWithoutCustomerInput>;
  deleted?: Maybe<Boolean>;
}

export interface CommercialVisitWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  visitDate?: Maybe<DateTimeInput>;
  visitDate_not?: Maybe<DateTimeInput>;
  visitDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  visitDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  visitDate_lt?: Maybe<DateTimeInput>;
  visitDate_lte?: Maybe<DateTimeInput>;
  visitDate_gt?: Maybe<DateTimeInput>;
  visitDate_gte?: Maybe<DateTimeInput>;
  contactPerson?: Maybe<String>;
  contactPerson_not?: Maybe<String>;
  contactPerson_in?: Maybe<String[] | String>;
  contactPerson_not_in?: Maybe<String[] | String>;
  contactPerson_lt?: Maybe<String>;
  contactPerson_lte?: Maybe<String>;
  contactPerson_gt?: Maybe<String>;
  contactPerson_gte?: Maybe<String>;
  contactPerson_contains?: Maybe<String>;
  contactPerson_not_contains?: Maybe<String>;
  contactPerson_starts_with?: Maybe<String>;
  contactPerson_not_starts_with?: Maybe<String>;
  contactPerson_ends_with?: Maybe<String>;
  contactPerson_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  seller?: Maybe<SellerWhereInput>;
  customer?: Maybe<CustomerWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<CommercialVisitWhereInput[] | CommercialVisitWhereInput>;
  OR?: Maybe<CommercialVisitWhereInput[] | CommercialVisitWhereInput>;
  NOT?: Maybe<CommercialVisitWhereInput[] | CommercialVisitWhereInput>;
}

export interface StateUpdateOneRequiredInput {
  create?: Maybe<StateCreateInput>;
  update?: Maybe<StateUpdateDataInput>;
  upsert?: Maybe<StateUpsertNestedInput>;
  connect?: Maybe<StateWhereUniqueInput>;
}

export interface CustomerWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  mainContactName?: Maybe<String>;
  mainContactName_not?: Maybe<String>;
  mainContactName_in?: Maybe<String[] | String>;
  mainContactName_not_in?: Maybe<String[] | String>;
  mainContactName_lt?: Maybe<String>;
  mainContactName_lte?: Maybe<String>;
  mainContactName_gt?: Maybe<String>;
  mainContactName_gte?: Maybe<String>;
  mainContactName_contains?: Maybe<String>;
  mainContactName_not_contains?: Maybe<String>;
  mainContactName_starts_with?: Maybe<String>;
  mainContactName_not_starts_with?: Maybe<String>;
  mainContactName_ends_with?: Maybe<String>;
  mainContactName_not_ends_with?: Maybe<String>;
  note?: Maybe<String>;
  note_not?: Maybe<String>;
  note_in?: Maybe<String[] | String>;
  note_not_in?: Maybe<String[] | String>;
  note_lt?: Maybe<String>;
  note_lte?: Maybe<String>;
  note_gt?: Maybe<String>;
  note_gte?: Maybe<String>;
  note_contains?: Maybe<String>;
  note_not_contains?: Maybe<String>;
  note_starts_with?: Maybe<String>;
  note_not_starts_with?: Maybe<String>;
  note_ends_with?: Maybe<String>;
  note_not_ends_with?: Maybe<String>;
  landline?: Maybe<String>;
  landline_not?: Maybe<String>;
  landline_in?: Maybe<String[] | String>;
  landline_not_in?: Maybe<String[] | String>;
  landline_lt?: Maybe<String>;
  landline_lte?: Maybe<String>;
  landline_gt?: Maybe<String>;
  landline_gte?: Maybe<String>;
  landline_contains?: Maybe<String>;
  landline_not_contains?: Maybe<String>;
  landline_starts_with?: Maybe<String>;
  landline_not_starts_with?: Maybe<String>;
  landline_ends_with?: Maybe<String>;
  landline_not_ends_with?: Maybe<String>;
  cellPhone?: Maybe<String>;
  cellPhone_not?: Maybe<String>;
  cellPhone_in?: Maybe<String[] | String>;
  cellPhone_not_in?: Maybe<String[] | String>;
  cellPhone_lt?: Maybe<String>;
  cellPhone_lte?: Maybe<String>;
  cellPhone_gt?: Maybe<String>;
  cellPhone_gte?: Maybe<String>;
  cellPhone_contains?: Maybe<String>;
  cellPhone_not_contains?: Maybe<String>;
  cellPhone_starts_with?: Maybe<String>;
  cellPhone_not_starts_with?: Maybe<String>;
  cellPhone_ends_with?: Maybe<String>;
  cellPhone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  stateRegistration_not?: Maybe<String>;
  stateRegistration_in?: Maybe<String[] | String>;
  stateRegistration_not_in?: Maybe<String[] | String>;
  stateRegistration_lt?: Maybe<String>;
  stateRegistration_lte?: Maybe<String>;
  stateRegistration_gt?: Maybe<String>;
  stateRegistration_gte?: Maybe<String>;
  stateRegistration_contains?: Maybe<String>;
  stateRegistration_not_contains?: Maybe<String>;
  stateRegistration_starts_with?: Maybe<String>;
  stateRegistration_not_starts_with?: Maybe<String>;
  stateRegistration_ends_with?: Maybe<String>;
  stateRegistration_not_ends_with?: Maybe<String>;
  cpfCnpj?: Maybe<String>;
  cpfCnpj_not?: Maybe<String>;
  cpfCnpj_in?: Maybe<String[] | String>;
  cpfCnpj_not_in?: Maybe<String[] | String>;
  cpfCnpj_lt?: Maybe<String>;
  cpfCnpj_lte?: Maybe<String>;
  cpfCnpj_gt?: Maybe<String>;
  cpfCnpj_gte?: Maybe<String>;
  cpfCnpj_contains?: Maybe<String>;
  cpfCnpj_not_contains?: Maybe<String>;
  cpfCnpj_starts_with?: Maybe<String>;
  cpfCnpj_not_starts_with?: Maybe<String>;
  cpfCnpj_ends_with?: Maybe<String>;
  cpfCnpj_not_ends_with?: Maybe<String>;
  state?: Maybe<StateWhereInput>;
  commercialVisits_every?: Maybe<CommercialVisitWhereInput>;
  commercialVisits_some?: Maybe<CommercialVisitWhereInput>;
  commercialVisits_none?: Maybe<CommercialVisitWhereInput>;
  seller?: Maybe<SellerWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface CustomerCreateWithoutSellerInput {
  id?: Maybe<UUID>;
  companyName: String;
  email?: Maybe<String>;
  mainContactName?: Maybe<String>;
  note?: Maybe<String>;
  landline?: Maybe<String>;
  cellPhone?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  cpfCnpj: String;
  state: StateCreateOneInput;
  commercialVisits?: Maybe<CommercialVisitCreateManyWithoutCustomerInput>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  mainContactName?: Maybe<String>;
  mainContactName_not?: Maybe<String>;
  mainContactName_in?: Maybe<String[] | String>;
  mainContactName_not_in?: Maybe<String[] | String>;
  mainContactName_lt?: Maybe<String>;
  mainContactName_lte?: Maybe<String>;
  mainContactName_gt?: Maybe<String>;
  mainContactName_gte?: Maybe<String>;
  mainContactName_contains?: Maybe<String>;
  mainContactName_not_contains?: Maybe<String>;
  mainContactName_starts_with?: Maybe<String>;
  mainContactName_not_starts_with?: Maybe<String>;
  mainContactName_ends_with?: Maybe<String>;
  mainContactName_not_ends_with?: Maybe<String>;
  note?: Maybe<String>;
  note_not?: Maybe<String>;
  note_in?: Maybe<String[] | String>;
  note_not_in?: Maybe<String[] | String>;
  note_lt?: Maybe<String>;
  note_lte?: Maybe<String>;
  note_gt?: Maybe<String>;
  note_gte?: Maybe<String>;
  note_contains?: Maybe<String>;
  note_not_contains?: Maybe<String>;
  note_starts_with?: Maybe<String>;
  note_not_starts_with?: Maybe<String>;
  note_ends_with?: Maybe<String>;
  note_not_ends_with?: Maybe<String>;
  landline?: Maybe<String>;
  landline_not?: Maybe<String>;
  landline_in?: Maybe<String[] | String>;
  landline_not_in?: Maybe<String[] | String>;
  landline_lt?: Maybe<String>;
  landline_lte?: Maybe<String>;
  landline_gt?: Maybe<String>;
  landline_gte?: Maybe<String>;
  landline_contains?: Maybe<String>;
  landline_not_contains?: Maybe<String>;
  landline_starts_with?: Maybe<String>;
  landline_not_starts_with?: Maybe<String>;
  landline_ends_with?: Maybe<String>;
  landline_not_ends_with?: Maybe<String>;
  cellPhone?: Maybe<String>;
  cellPhone_not?: Maybe<String>;
  cellPhone_in?: Maybe<String[] | String>;
  cellPhone_not_in?: Maybe<String[] | String>;
  cellPhone_lt?: Maybe<String>;
  cellPhone_lte?: Maybe<String>;
  cellPhone_gt?: Maybe<String>;
  cellPhone_gte?: Maybe<String>;
  cellPhone_contains?: Maybe<String>;
  cellPhone_not_contains?: Maybe<String>;
  cellPhone_starts_with?: Maybe<String>;
  cellPhone_not_starts_with?: Maybe<String>;
  cellPhone_ends_with?: Maybe<String>;
  cellPhone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  stateRegistration_not?: Maybe<String>;
  stateRegistration_in?: Maybe<String[] | String>;
  stateRegistration_not_in?: Maybe<String[] | String>;
  stateRegistration_lt?: Maybe<String>;
  stateRegistration_lte?: Maybe<String>;
  stateRegistration_gt?: Maybe<String>;
  stateRegistration_gte?: Maybe<String>;
  stateRegistration_contains?: Maybe<String>;
  stateRegistration_not_contains?: Maybe<String>;
  stateRegistration_starts_with?: Maybe<String>;
  stateRegistration_not_starts_with?: Maybe<String>;
  stateRegistration_ends_with?: Maybe<String>;
  stateRegistration_not_ends_with?: Maybe<String>;
  cpfCnpj?: Maybe<String>;
  cpfCnpj_not?: Maybe<String>;
  cpfCnpj_in?: Maybe<String[] | String>;
  cpfCnpj_not_in?: Maybe<String[] | String>;
  cpfCnpj_lt?: Maybe<String>;
  cpfCnpj_lte?: Maybe<String>;
  cpfCnpj_gt?: Maybe<String>;
  cpfCnpj_gte?: Maybe<String>;
  cpfCnpj_contains?: Maybe<String>;
  cpfCnpj_not_contains?: Maybe<String>;
  cpfCnpj_starts_with?: Maybe<String>;
  cpfCnpj_not_starts_with?: Maybe<String>;
  cpfCnpj_ends_with?: Maybe<String>;
  cpfCnpj_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  OR?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  NOT?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
}

export interface StateCreateOneInput {
  create?: Maybe<StateCreateInput>;
  connect?: Maybe<StateWhereUniqueInput>;
}

export interface StateUpdateDataInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface StateCreateInput {
  id?: Maybe<UUID>;
  name: String;
  shortName: String;
  deleted?: Maybe<Boolean>;
}

export interface SellerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SellerWhereInput>;
  AND?: Maybe<SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput>;
  OR?: Maybe<SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput>;
  NOT?: Maybe<SellerSubscriptionWhereInput[] | SellerSubscriptionWhereInput>;
}

export interface CommercialVisitCreateManyWithoutCustomerInput {
  create?: Maybe<
    | CommercialVisitCreateWithoutCustomerInput[]
    | CommercialVisitCreateWithoutCustomerInput
  >;
  connect?: Maybe<
    CommercialVisitWhereUniqueInput[] | CommercialVisitWhereUniqueInput
  >;
}

export interface CommercialVisitSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommercialVisitWhereInput>;
  AND?: Maybe<
    | CommercialVisitSubscriptionWhereInput[]
    | CommercialVisitSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CommercialVisitSubscriptionWhereInput[]
    | CommercialVisitSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CommercialVisitSubscriptionWhereInput[]
    | CommercialVisitSubscriptionWhereInput
  >;
}

export interface CommercialVisitCreateWithoutCustomerInput {
  id?: Maybe<UUID>;
  visitDate: DateTimeInput;
  contactPerson: String;
  description: String;
  seller: SellerCreateOneInput;
  deleted?: Maybe<Boolean>;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
  cpfCnpj?: Maybe<String>;
}>;

export interface CustomerCreateOneWithoutCommercialVisitsInput {
  create?: Maybe<CustomerCreateWithoutCommercialVisitsInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface SellerUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerCreateWithoutCommercialVisitsInput {
  id?: Maybe<UUID>;
  companyName: String;
  email?: Maybe<String>;
  mainContactName?: Maybe<String>;
  note?: Maybe<String>;
  landline?: Maybe<String>;
  cellPhone?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  cpfCnpj: String;
  state: StateCreateOneInput;
  seller: SellerCreateOneWithoutCustomersInput;
  deleted?: Maybe<Boolean>;
}

export type SellerWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
  email?: Maybe<String>;
}>;

export interface SellerCreateOneWithoutCustomersInput {
  create?: Maybe<SellerCreateWithoutCustomersInput>;
  connect?: Maybe<SellerWhereUniqueInput>;
}

export interface CustomerUpdateInput {
  companyName?: Maybe<String>;
  email?: Maybe<String>;
  mainContactName?: Maybe<String>;
  note?: Maybe<String>;
  landline?: Maybe<String>;
  cellPhone?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  cpfCnpj?: Maybe<String>;
  state?: Maybe<StateUpdateOneRequiredInput>;
  commercialVisits?: Maybe<CommercialVisitUpdateManyWithoutCustomerInput>;
  seller?: Maybe<SellerUpdateOneRequiredWithoutCustomersInput>;
  deleted?: Maybe<Boolean>;
}

export interface SellerCreateWithoutCustomersInput {
  id?: Maybe<UUID>;
  email: String;
  name: String;
  password: String;
  deleted?: Maybe<Boolean>;
}

export interface CommercialVisitUpdateManyMutationInput {
  visitDate?: Maybe<DateTimeInput>;
  contactPerson?: Maybe<String>;
  description?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerUpdateOneRequiredWithoutCommercialVisitsInput {
  create?: Maybe<CustomerCreateWithoutCommercialVisitsInput>;
  update?: Maybe<CustomerUpdateWithoutCommercialVisitsDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutCommercialVisitsInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerUpsertWithoutCommercialVisitsInput {
  update: CustomerUpdateWithoutCommercialVisitsDataInput;
  create: CustomerCreateWithoutCommercialVisitsInput;
}

export interface SellerUpdateOneRequiredInput {
  create?: Maybe<SellerCreateInput>;
  update?: Maybe<SellerUpdateDataInput>;
  upsert?: Maybe<SellerUpsertNestedInput>;
  connect?: Maybe<SellerWhereUniqueInput>;
}

export interface SellerUpdateWithoutCustomersDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface SellerUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  customers?: Maybe<CustomerUpdateManyWithoutSellerInput>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerUpdateWithoutCommercialVisitsDataInput {
  companyName?: Maybe<String>;
  email?: Maybe<String>;
  mainContactName?: Maybe<String>;
  note?: Maybe<String>;
  landline?: Maybe<String>;
  cellPhone?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  cpfCnpj?: Maybe<String>;
  state?: Maybe<StateUpdateOneRequiredInput>;
  seller?: Maybe<SellerUpdateOneRequiredWithoutCustomersInput>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerUpdateManyWithoutSellerInput {
  create?: Maybe<
    CustomerCreateWithoutSellerInput[] | CustomerCreateWithoutSellerInput
  >;
  delete?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  connect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  set?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  disconnect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  update?: Maybe<
    | CustomerUpdateWithWhereUniqueWithoutSellerInput[]
    | CustomerUpdateWithWhereUniqueWithoutSellerInput
  >;
  upsert?: Maybe<
    | CustomerUpsertWithWhereUniqueWithoutSellerInput[]
    | CustomerUpsertWithWhereUniqueWithoutSellerInput
  >;
  deleteMany?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  updateMany?: Maybe<
    | CustomerUpdateManyWithWhereNestedInput[]
    | CustomerUpdateManyWithWhereNestedInput
  >;
}

export interface CommercialVisitCreateInput {
  id?: Maybe<UUID>;
  visitDate: DateTimeInput;
  contactPerson: String;
  description: String;
  seller: SellerCreateOneInput;
  customer: CustomerCreateOneWithoutCommercialVisitsInput;
  deleted?: Maybe<Boolean>;
}

export interface SellerUpsertNestedInput {
  update: SellerUpdateDataInput;
  create: SellerCreateInput;
}

export interface SellerCreateInput {
  id?: Maybe<UUID>;
  email: String;
  name: String;
  password: String;
  customers?: Maybe<CustomerCreateManyWithoutSellerInput>;
  deleted?: Maybe<Boolean>;
}

export interface SellerWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  customers_every?: Maybe<CustomerWhereInput>;
  customers_some?: Maybe<CustomerWhereInput>;
  customers_none?: Maybe<CustomerWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<SellerWhereInput[] | SellerWhereInput>;
  OR?: Maybe<SellerWhereInput[] | SellerWhereInput>;
  NOT?: Maybe<SellerWhereInput[] | SellerWhereInput>;
}

export interface StateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StateWhereInput>;
  AND?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
  OR?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
  NOT?: Maybe<StateSubscriptionWhereInput[] | StateSubscriptionWhereInput>;
}

export interface CustomerUpdateManyDataInput {
  companyName?: Maybe<String>;
  email?: Maybe<String>;
  mainContactName?: Maybe<String>;
  note?: Maybe<String>;
  landline?: Maybe<String>;
  cellPhone?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  cpfCnpj?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface StateUpdateManyMutationInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerUpdateManyWithWhereNestedInput {
  where: CustomerScalarWhereInput;
  data: CustomerUpdateManyDataInput;
}

export interface SellerUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  customers?: Maybe<CustomerUpdateManyWithoutSellerInput>;
  deleted?: Maybe<Boolean>;
}

export interface StateUpsertNestedInput {
  update: StateUpdateDataInput;
  create: StateCreateInput;
}

export interface CustomerCreateInput {
  id?: Maybe<UUID>;
  companyName: String;
  email?: Maybe<String>;
  mainContactName?: Maybe<String>;
  note?: Maybe<String>;
  landline?: Maybe<String>;
  cellPhone?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  cpfCnpj: String;
  state: StateCreateOneInput;
  commercialVisits?: Maybe<CommercialVisitCreateManyWithoutCustomerInput>;
  seller: SellerCreateOneWithoutCustomersInput;
  deleted?: Maybe<Boolean>;
}

export interface CommercialVisitUpdateManyWithoutCustomerInput {
  create?: Maybe<
    | CommercialVisitCreateWithoutCustomerInput[]
    | CommercialVisitCreateWithoutCustomerInput
  >;
  delete?: Maybe<
    CommercialVisitWhereUniqueInput[] | CommercialVisitWhereUniqueInput
  >;
  connect?: Maybe<
    CommercialVisitWhereUniqueInput[] | CommercialVisitWhereUniqueInput
  >;
  set?: Maybe<
    CommercialVisitWhereUniqueInput[] | CommercialVisitWhereUniqueInput
  >;
  disconnect?: Maybe<
    CommercialVisitWhereUniqueInput[] | CommercialVisitWhereUniqueInput
  >;
  update?: Maybe<
    | CommercialVisitUpdateWithWhereUniqueWithoutCustomerInput[]
    | CommercialVisitUpdateWithWhereUniqueWithoutCustomerInput
  >;
  upsert?: Maybe<
    | CommercialVisitUpsertWithWhereUniqueWithoutCustomerInput[]
    | CommercialVisitUpsertWithWhereUniqueWithoutCustomerInput
  >;
  deleteMany?: Maybe<
    CommercialVisitScalarWhereInput[] | CommercialVisitScalarWhereInput
  >;
  updateMany?: Maybe<
    | CommercialVisitUpdateManyWithWhereNestedInput[]
    | CommercialVisitUpdateManyWithWhereNestedInput
  >;
}

export interface SellerUpsertWithoutCustomersInput {
  update: SellerUpdateWithoutCustomersDataInput;
  create: SellerCreateWithoutCustomersInput;
}

export interface CommercialVisitUpdateWithWhereUniqueWithoutCustomerInput {
  where: CommercialVisitWhereUniqueInput;
  data: CommercialVisitUpdateWithoutCustomerDataInput;
}

export interface CustomerCreateManyWithoutSellerInput {
  create?: Maybe<
    CustomerCreateWithoutSellerInput[] | CustomerCreateWithoutSellerInput
  >;
  connect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
}

export interface CommercialVisitUpdateWithoutCustomerDataInput {
  visitDate?: Maybe<DateTimeInput>;
  contactPerson?: Maybe<String>;
  description?: Maybe<String>;
  seller?: Maybe<SellerUpdateOneRequiredInput>;
  deleted?: Maybe<Boolean>;
}

export interface StateUpdateInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface CommercialVisitUpsertWithWhereUniqueWithoutCustomerInput {
  where: CommercialVisitWhereUniqueInput;
  update: CommercialVisitUpdateWithoutCustomerDataInput;
  create: CommercialVisitCreateWithoutCustomerInput;
}

export type StateWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface CustomerUpsertWithWhereUniqueWithoutSellerInput {
  where: CustomerWhereUniqueInput;
  update: CustomerUpdateWithoutSellerDataInput;
  create: CustomerCreateWithoutSellerInput;
}

export interface CommercialVisitUpdateManyDataInput {
  visitDate?: Maybe<DateTimeInput>;
  contactPerson?: Maybe<String>;
  description?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface CommercialVisitUpdateManyWithWhereNestedInput {
  where: CommercialVisitScalarWhereInput;
  data: CommercialVisitUpdateManyDataInput;
}

export interface CommercialVisitScalarWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  visitDate?: Maybe<DateTimeInput>;
  visitDate_not?: Maybe<DateTimeInput>;
  visitDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  visitDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  visitDate_lt?: Maybe<DateTimeInput>;
  visitDate_lte?: Maybe<DateTimeInput>;
  visitDate_gt?: Maybe<DateTimeInput>;
  visitDate_gte?: Maybe<DateTimeInput>;
  contactPerson?: Maybe<String>;
  contactPerson_not?: Maybe<String>;
  contactPerson_in?: Maybe<String[] | String>;
  contactPerson_not_in?: Maybe<String[] | String>;
  contactPerson_lt?: Maybe<String>;
  contactPerson_lte?: Maybe<String>;
  contactPerson_gt?: Maybe<String>;
  contactPerson_gte?: Maybe<String>;
  contactPerson_contains?: Maybe<String>;
  contactPerson_not_contains?: Maybe<String>;
  contactPerson_starts_with?: Maybe<String>;
  contactPerson_not_starts_with?: Maybe<String>;
  contactPerson_ends_with?: Maybe<String>;
  contactPerson_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<
    CommercialVisitScalarWhereInput[] | CommercialVisitScalarWhereInput
  >;
  OR?: Maybe<
    CommercialVisitScalarWhereInput[] | CommercialVisitScalarWhereInput
  >;
  NOT?: Maybe<
    CommercialVisitScalarWhereInput[] | CommercialVisitScalarWhereInput
  >;
}

export interface SellerUpdateOneRequiredWithoutCustomersInput {
  create?: Maybe<SellerCreateWithoutCustomersInput>;
  update?: Maybe<SellerUpdateWithoutCustomersDataInput>;
  upsert?: Maybe<SellerUpsertWithoutCustomersInput>;
  connect?: Maybe<SellerWhereUniqueInput>;
}

export interface CustomerUpdateManyMutationInput {
  companyName?: Maybe<String>;
  email?: Maybe<String>;
  mainContactName?: Maybe<String>;
  note?: Maybe<String>;
  landline?: Maybe<String>;
  cellPhone?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  stateRegistration?: Maybe<String>;
  cpfCnpj?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface SellerCreateOneInput {
  create?: Maybe<SellerCreateInput>;
  connect?: Maybe<SellerWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface StatePreviousValues {
  id: UUID;
  name: String;
  shortName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface StatePreviousValuesPromise
  extends Promise<StatePreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface StatePreviousValuesSubscription
  extends Promise<AsyncIterator<StatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  shortName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Customer {
  id: UUID;
  companyName: String;
  email?: String;
  mainContactName?: String;
  note?: String;
  landline?: String;
  cellPhone?: String;
  address?: String;
  city?: String;
  stateRegistration?: String;
  cpfCnpj: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<UUID>;
  companyName: () => Promise<String>;
  email: () => Promise<String>;
  mainContactName: () => Promise<String>;
  note: () => Promise<String>;
  landline: () => Promise<String>;
  cellPhone: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  stateRegistration: () => Promise<String>;
  cpfCnpj: () => Promise<String>;
  state: <T = StatePromise>() => T;
  commercialVisits: <T = FragmentableArray<CommercialVisit>>(args?: {
    where?: CommercialVisitWhereInput;
    orderBy?: CommercialVisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seller: <T = SellerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  companyName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  mainContactName: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  landline: () => Promise<AsyncIterator<String>>;
  cellPhone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  stateRegistration: () => Promise<AsyncIterator<String>>;
  cpfCnpj: () => Promise<AsyncIterator<String>>;
  state: <T = StateSubscription>() => T;
  commercialVisits: <
    T = Promise<AsyncIterator<CommercialVisitSubscription>>
  >(args?: {
    where?: CommercialVisitWhereInput;
    orderBy?: CommercialVisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seller: <T = SellerSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  companyName: () => Promise<String>;
  email: () => Promise<String>;
  mainContactName: () => Promise<String>;
  note: () => Promise<String>;
  landline: () => Promise<String>;
  cellPhone: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  stateRegistration: () => Promise<String>;
  cpfCnpj: () => Promise<String>;
  state: <T = StatePromise>() => T;
  commercialVisits: <T = FragmentableArray<CommercialVisit>>(args?: {
    where?: CommercialVisitWhereInput;
    orderBy?: CommercialVisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seller: <T = SellerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface State {
  id: UUID;
  name: String;
  shortName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface StatePromise extends Promise<State>, Fragmentable {
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface StateSubscription
  extends Promise<AsyncIterator<State>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  name: () => Promise<AsyncIterator<String>>;
  shortName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface StateNullablePromise
  extends Promise<State | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerPreviousValues {
  id: UUID;
  companyName: String;
  email?: String;
  mainContactName?: String;
  note?: String;
  landline?: String;
  cellPhone?: String;
  address?: String;
  city?: String;
  stateRegistration?: String;
  cpfCnpj: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  companyName: () => Promise<String>;
  email: () => Promise<String>;
  mainContactName: () => Promise<String>;
  note: () => Promise<String>;
  landline: () => Promise<String>;
  cellPhone: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  stateRegistration: () => Promise<String>;
  cpfCnpj: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  companyName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  mainContactName: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  landline: () => Promise<AsyncIterator<String>>;
  cellPhone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  stateRegistration: () => Promise<AsyncIterator<String>>;
  cpfCnpj: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface SellerSubscriptionPayload {
  mutation: MutationType;
  node: Seller;
  updatedFields: String[];
  previousValues: SellerPreviousValues;
}

export interface SellerSubscriptionPayloadPromise
  extends Promise<SellerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SellerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SellerPreviousValuesPromise>() => T;
}

export interface SellerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SellerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SellerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SellerPreviousValuesSubscription>() => T;
}

export interface AggregateCommercialVisit {
  count: Int;
}

export interface AggregateCommercialVisitPromise
  extends Promise<AggregateCommercialVisit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommercialVisitSubscription
  extends Promise<AsyncIterator<AggregateCommercialVisit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommercialVisitConnection {
  pageInfo: PageInfo;
  edges: CommercialVisitEdge[];
}

export interface CommercialVisitConnectionPromise
  extends Promise<CommercialVisitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommercialVisitEdge>>() => T;
  aggregate: <T = AggregateCommercialVisitPromise>() => T;
}

export interface CommercialVisitConnectionSubscription
  extends Promise<AsyncIterator<CommercialVisitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommercialVisitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommercialVisitSubscription>() => T;
}

export interface StateConnection {
  pageInfo: PageInfo;
  edges: StateEdge[];
}

export interface StateConnectionPromise
  extends Promise<StateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StateEdge>>() => T;
  aggregate: <T = AggregateStatePromise>() => T;
}

export interface StateConnectionSubscription
  extends Promise<AsyncIterator<StateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStateSubscription>() => T;
}

export interface AggregateState {
  count: Int;
}

export interface AggregateStatePromise
  extends Promise<AggregateState>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStateSubscription
  extends Promise<AsyncIterator<AggregateState>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSeller {
  count: Int;
}

export interface AggregateSellerPromise
  extends Promise<AggregateSeller>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSellerSubscription
  extends Promise<AsyncIterator<AggregateSeller>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommercialVisitEdge {
  node: CommercialVisit;
  cursor: String;
}

export interface CommercialVisitEdgePromise
  extends Promise<CommercialVisitEdge>,
    Fragmentable {
  node: <T = CommercialVisitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommercialVisitEdgeSubscription
  extends Promise<AsyncIterator<CommercialVisitEdge>>,
    Fragmentable {
  node: <T = CommercialVisitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Seller {
  id: UUID;
  email: String;
  name: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface SellerPromise extends Promise<Seller>, Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  customers: <T = FragmentableArray<Customer>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface SellerSubscription
  extends Promise<AsyncIterator<Seller>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  customers: <T = Promise<AsyncIterator<CustomerSubscription>>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface SellerNullablePromise
  extends Promise<Seller | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  customers: <T = FragmentableArray<Customer>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CommercialVisit {
  id: UUID;
  visitDate: DateTimeOutput;
  contactPerson: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface CommercialVisitPromise
  extends Promise<CommercialVisit>,
    Fragmentable {
  id: () => Promise<UUID>;
  visitDate: () => Promise<DateTimeOutput>;
  contactPerson: () => Promise<String>;
  description: () => Promise<String>;
  seller: <T = SellerPromise>() => T;
  customer: <T = CustomerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CommercialVisitSubscription
  extends Promise<AsyncIterator<CommercialVisit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  visitDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  contactPerson: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  seller: <T = SellerSubscription>() => T;
  customer: <T = CustomerSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface CommercialVisitNullablePromise
  extends Promise<CommercialVisit | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  visitDate: () => Promise<DateTimeOutput>;
  contactPerson: () => Promise<String>;
  description: () => Promise<String>;
  seller: <T = SellerPromise>() => T;
  customer: <T = CustomerPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface SellerConnection {
  pageInfo: PageInfo;
  edges: SellerEdge[];
}

export interface SellerConnectionPromise
  extends Promise<SellerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SellerEdge>>() => T;
  aggregate: <T = AggregateSellerPromise>() => T;
}

export interface SellerConnectionSubscription
  extends Promise<AsyncIterator<SellerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SellerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSellerSubscription>() => T;
}

export interface StateEdge {
  node: State;
  cursor: String;
}

export interface StateEdgePromise extends Promise<StateEdge>, Fragmentable {
  node: <T = StatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface StateEdgeSubscription
  extends Promise<AsyncIterator<StateEdge>>,
    Fragmentable {
  node: <T = StateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommercialVisitPreviousValues {
  id: UUID;
  visitDate: DateTimeOutput;
  contactPerson: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface CommercialVisitPreviousValuesPromise
  extends Promise<CommercialVisitPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  visitDate: () => Promise<DateTimeOutput>;
  contactPerson: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface CommercialVisitPreviousValuesSubscription
  extends Promise<AsyncIterator<CommercialVisitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  visitDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  contactPerson: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface CommercialVisitSubscriptionPayload {
  mutation: MutationType;
  node: CommercialVisit;
  updatedFields: String[];
  previousValues: CommercialVisitPreviousValues;
}

export interface CommercialVisitSubscriptionPayloadPromise
  extends Promise<CommercialVisitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommercialVisitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommercialVisitPreviousValuesPromise>() => T;
}

export interface CommercialVisitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommercialVisitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommercialVisitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommercialVisitPreviousValuesSubscription>() => T;
}

export interface StateSubscriptionPayload {
  mutation: MutationType;
  node: State;
  updatedFields: String[];
  previousValues: StatePreviousValues;
}

export interface StateSubscriptionPayloadPromise
  extends Promise<StateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatePreviousValuesPromise>() => T;
}

export interface StateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatePreviousValuesSubscription>() => T;
}

export interface SellerPreviousValues {
  id: UUID;
  email: String;
  name: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deleted: Boolean;
}

export interface SellerPreviousValuesPromise
  extends Promise<SellerPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface SellerPreviousValuesSubscription
  extends Promise<AsyncIterator<SellerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface SellerEdge {
  node: Seller;
  cursor: String;
}

export interface SellerEdgePromise extends Promise<SellerEdge>, Fragmentable {
  node: <T = SellerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SellerEdgeSubscription
  extends Promise<AsyncIterator<SellerEdge>>,
    Fragmentable {
  node: <T = SellerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type UUID = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Seller",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "State",
    embedded: false
  },
  {
    name: "CommercialVisit",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_SERVER_ENDPOINT"]}/${
    process.env["PRISMA_APP_NAME"]
  }/${process.env["PRISMA_APP_STAGE"]}`,
  secret: `${process.env["PRISMA_MANAGEMENT_API_SECRET"]}`
});
export const prisma = new Prisma();
